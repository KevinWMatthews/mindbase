
# This is an artifact. It represents the raw text string only.
# It may posess `External Meaning`, but not `Internal Meaning`
@alice =   Text("Alice Jones")

# This is valid shorthand for the above. We are overwriting the artifact variable @alice here, but
# since artifacts are content-addressable, the outcome is the same. No duplicate data is stored.
@alice =   "Alice Jones"

# Now let's use that artifact to create a new symbol for the purpose of this conversation.
# We want a new symbol because meaning is contextual - There are MANY possible meanings of "Alice Jones"
# and it's not yet clear which one this should be, or if that's even defined yet. Therefore we create a
# new symbol to capture that meaning. Symbolize returns a symbol variable $alice which we can later
# constrain and refine through analogy!
$alice =   Symbolize(@alice)

# Lets imagine Alice said something, and we want to record that. As a convenience, we can reference
# artifacts inline when Symbolizing. We can inline most of our operations in fact. Variables are used
# when we want to improve readability, or reference certain artifacts/symbols multiple times. 
$turtles = Symbolize("I like turtles")

# Lets Alledge a relationship between the new symbol for Alice, and the new symbol for "I Like turtles"
# You may notice that `Alledge` also returns a symbol variable. `Alledge` is very similar to `Symbolize`,
# except that it accepts Analogies. These analogies may be expressed in forms that seem familiar, like a
# Pair vs Pair notation, or they may be deconstructed to express the parts of the analogy independently.

# For example `Dog : Woof :: Cat : Meow` would be expressed as 
$animal_sounds = Alledge(("Dog":"Woof") : ("Cat":"Meow"))

#alternately, you could express it equivalently as:
$dog_sound = Alledge("Dog":"Woof")
$cat_sound = Alledge("Cat":"Meow")
$animal_sounds = Alledge( $dog_sound : $cat_sound )


# Lets revisit one part of that for a moment
$dog_sound2 = Alledge("Dog":"Woof")
# When we do this, we are creating THREE new symbols.
# 1. A new symbol referencing artifact "Dog"
# 2. A new Symbol referencing artifact "Woof"
# 3. A new Analogical (and unlabeled) symbol representing that the first two Symbols are _somehow_ related...
# But that relation has not yet been further constrained! It's meaning is murky, other than representing some abstract
# essence that "Dog" and "Woof" have in common. As before, we can relate that essence to the similar "Cat":"Meow" essence
# in order to _begin_ to constrain the meanings of both symbols.
$animal_sounds2 = Alledge( $dog_sound2 : ("Cat":"Meow"))

# One important detail of the above examples is that neither of them is "grounded". That is to say, up to this point at least,
# None of these symbols is in any way canonical, nor are they correlated to symbols which are canonical. They may posess
# "External meaning" but their "Internal Meaning" remains an island within the broader Mindbase Data.

# We can cure this by correlating them to `Ground` symbols, and also by correlating the symbols we've created to each other.
# For instance, we create an association between both animal_sounds symbols created above:
$same_sounds = Alledge( $animal_sounds : $animal_sounds2 )

# TODO - finish ground symbol portion

# QUESTION: Should we be able to access Analogy Symbol internals like this?
# $same_dog = Alledge( $animal_sounds.left : $animal_sounds2.left )


$alice_turtles: Alledge($alice : $turtles)


# Lets look up some ground symbols. The [square braces] indicate that a symbol should
# be looked up. Unlike `Symbolize` and `Alledge`, which create new symbols each time,
# It will automatically create a new symbol, but only if it wasn't found.
# ground symbols are are always the same for a given set of inputs and system state
$person    =  {"A Person"}
$en_statement = {"Statement Made" : "English"}
$de_statement = {"Statement Made" : "" }

# now lets look up another ground symbol for the relationship between these
$person_statement = {$person : $en_statement}

$alice_said = Alledge( $alice_turtles : $person_statement )

# Using @artifact and $symbol variables can help us avoid repeating ourselves when dealing with a
# lot of data, but we can also do all of this inline. The following is equivalent to all of the above:
Alledge( ("Alice Jones" : "I like turtles") : ({"A person"} : {"Statement Made" "In English"}) )

# Inquire (X : "I like turtles")
# Inquire(X : Y)
# See prologish_ideation.txt




